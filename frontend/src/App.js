import React, { useState, useEffect, useRef } from 'react';
import { Send, Brain, Code, Search, Upload, History, Settings, Zap, Globe, Cpu, Database } from 'lucide-react';
import './App.css';

const API_URL = process.env.REACT_APP_BACKEND_URL;

function App() {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('chat');
  const [analysisData, setAnalysisData] = useState(null);
  const [searchResults, setSearchResults] = useState([]);
  const [improvementsHistory, setImprovementsHistory] = useState([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [aiStatus, setAiStatus] = useState('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  const chatEndRef = useRef(null);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
    setMessages([{
      type: 'ai',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–π—Å—è –ò–ò —Å–∏—Å—Ç–µ–º—ã. –Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–∑—É—á–∞—é –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ —É–ª—É—á—à–∞—é —Å–≤–æ–π –∫–æ–¥. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ - —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–∏–º–µ–Ω—é –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è —Å–≤–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è!',
      timestamp: new Date().toISOString(),
      improvements: [],
      knowledge_gained: []
    }]);
    loadChatHistory();
    loadImprovementsHistory();
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const loadChatHistory = async () => {
    try {
      const response = await fetch(`${API_URL}/api/history`);
      const data = await response.json();
      if (data.messages && data.messages.length > 0) {
        const formattedMessages = data.messages.reverse().map(msg => ({
          type: msg.type,
          content: msg.user_message || msg.ai_response,
          timestamp: msg.timestamp,
          improvements: msg.improvements || [],
          knowledge_gained: msg.knowledge_gained || []
        }));
        setMessages(prev => [...prev, ...formattedMessages]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
  };

  const loadImprovementsHistory = async () => {
    try {
      const response = await fetch(`${API_URL}/api/improvements-history`);
      const data = await response.json();
      setImprovementsHistory(data.improvements || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π:', error);
    }
  };

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      type: 'user',
      content: inputMessage,
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);
    setAiStatus('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...');

    try {
      const response = await fetch(`${API_URL}/api/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: inputMessage }),
      });

      const data = await response.json();
      
      const aiMessage = {
        type: 'ai',
        content: data.response,
        timestamp: data.timestamp,
        improvements: data.improvements || [],
        knowledge_gained: data.knowledge_gained || []
      };

      setMessages(prev => [...prev, aiMessage]);
      setAiStatus('–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      setMessages(prev => [...prev, {
        type: 'ai',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
        timestamp: new Date().toISOString(),
        improvements: [],
        knowledge_gained: []
      }]);
      setAiStatus('–û—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  const analyzeCode = async () => {
    setIsAnalyzing(true);
    setAiStatus('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥...');
    
    try {
      const response = await fetch(`${API_URL}/api/analyze`);
      const data = await response.json();
      setAnalysisData(data);
      setActiveTab('analysis');
      setAiStatus('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞:', error);
      setAiStatus('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const applyImprovements = async () => {
    setAiStatus('–ü—Ä–∏–º–µ–Ω—è—é —É–ª—É—á—à–µ–Ω–∏—è...');
    
    try {
      const response = await fetch(`${API_URL}/api/improve`, {
        method: 'POST',
      });
      const data = await response.json();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
      setMessages(prev => [...prev, {
        type: 'ai',
        content: `üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–¥–∞:\n\n${data.message}\n\n–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è: ${data.details?.applied?.join(', ') || '–Ω–µ—Ç'}\n–û—à–∏–±–∫–∏: ${data.details?.errors?.join(', ') || '–Ω–µ—Ç'}`,
        timestamp: new Date().toISOString(),
        improvements: data.details?.applied || [],
        knowledge_gained: []
      }]);
      
      loadImprovementsHistory();
      setAiStatus('–£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π:', error);
      setAiStatus('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è');
    }
  };

  const searchInternet = async (query) => {
    setAiStatus('–ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...');
    
    try {
      const response = await fetch(`${API_URL}/api/search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query, max_results: 10 }),
      });
      const data = await response.json();
      setSearchResults(data.results || []);
      setActiveTab('search');
      setAiStatus('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      setAiStatus('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const uploadFile = async (file) => {
    const formData = new FormData();
    formData.append('file', file);
    
    setAiStatus('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...');
    
    try {
      const response = await fetch(`${API_URL}/api/upload-knowledge`, {
        method: 'POST',
        body: formData,
      });
      const data = await response.json();
      
      setMessages(prev => [...prev, {
        type: 'ai',
        content: `üìÅ ${data.message}\n–ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–Ω–∞–Ω–∏–π: ${data.knowledge_extracted}`,
        timestamp: new Date().toISOString(),
        improvements: [],
        knowledge_gained: []
      }]);
      
      setAiStatus('–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
      setAiStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  };

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      uploadFile(file);
    }
  };

  return (
    <div className="app">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <header className="app-header">
        <div className="header-content">
          <div className="logo">
            <Brain className="logo-icon" />
            <h1>–°–∞–º–æ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏–π—Å—è –ò–ò</h1>
          </div>
          <div className="status-indicator">
            <div className={`status-dot ${aiStatus.includes('–û—à–∏–±–∫–∞') ? 'error' : 'active'}`}></div>
            <span className="status-text">{aiStatus}</span>
          </div>
        </div>
      </header>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <nav className="navigation">
        <button 
          className={`nav-button ${activeTab === 'chat' ? 'active' : ''}`}
          onClick={() => setActiveTab('chat')}
        >
          <Brain size={20} />
          –ß–∞—Ç —Å –ò–ò
        </button>
        <button 
          className={`nav-button ${activeTab === 'analysis' ? 'active' : ''}`}
          onClick={() => setActiveTab('analysis')}
        >
          <Code size={20} />
          –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        </button>
        <button 
          className={`nav-button ${activeTab === 'search' ? 'active' : ''}`}
          onClick={() => setActiveTab('search')}
        >
          <Search size={20} />
          –ü–æ–∏—Å–∫ –≤ —Å–µ—Ç–∏
        </button>
        <button 
          className={`nav-button ${activeTab === 'history' ? 'active' : ''}`}
          onClick={() => setActiveTab('history')}
        >
          <History size={20} />
          –ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π
        </button>
      </nav>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="main-content">
        {activeTab === 'chat' && (
          <div className="chat-container">
            <div className="messages-area">
              {messages.map((message, index) => (
                <div key={index} className={`message ${message.type}`}>
                  <div className="message-content">
                    <pre className="message-text">{message.content}</pre>
                    
                    {message.improvements && message.improvements.length > 0 && (
                      <div className="improvements-badge">
                        <Zap size={16} />
                        <span>–ù–∞–π–¥–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {message.improvements.length}</span>
                      </div>
                    )}
                    
                    {message.knowledge_gained && message.knowledge_gained.length > 0 && (
                      <div className="knowledge-badge">
                        <Database size={16} />
                        <span>–ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞–Ω–∏–π: {message.knowledge_gained.join(', ')}</span>
                      </div>
                    )}
                  </div>
                  <div className="message-time">
                    {new Date(message.timestamp).toLocaleString('ru-RU')}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="message ai loading">
                  <div className="loading-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              )}
              <div ref={chatEndRef} />
            </div>

            <div className="input-area">
              <div className="action-buttons">
                <button 
                  className="action-btn analyze" 
                  onClick={analyzeCode}
                  disabled={isAnalyzing}
                >
                  <Code size={18} />
                  {isAnalyzing ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...' : '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞'}
                </button>
                <button 
                  className="action-btn improve" 
                  onClick={applyImprovements}
                >
                  <Zap size={18} />
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
                </button>
                <button 
                  className="action-btn search" 
                  onClick={() => searchInternet('–Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è 2025')}
                >
                  <Globe size={18} />
                  –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
                </button>
                <label className="action-btn upload">
                  <Upload size={18} />
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
                  <input type="file" hidden onChange={handleFileUpload} />
                </label>
              </div>

              <div className="message-input">
                <textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ò–ò..."
                  disabled={isLoading}
                />
                <button 
                  className="send-button"
                  onClick={sendMessage}
                  disabled={isLoading || !inputMessage.trim()}
                >
                  <Send size={20} />
                </button>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'analysis' && (
          <div className="analysis-container">
            <div className="analysis-header">
              <h2>–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã</h2>
              <button className="analyze-button" onClick={analyzeCode}>
                <Cpu size={20} />
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑
              </button>
            </div>
            
            {analysisData ? (
              <div className="analysis-results">
                <div className="stat-card">
                  <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h3>
                  <div className="stats">
                    <div className="stat">
                      <span className="stat-value">{analysisData.files_analyzed}</span>
                      <span className="stat-label">–§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</span>
                    </div>
                    <div className="stat">
                      <span className="stat-value">{analysisData.potential_improvements?.length || 0}</span>
                      <span className="stat-label">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π</span>
                    </div>
                  </div>
                </div>

                {analysisData.potential_improvements && analysisData.potential_improvements.length > 0 && (
                  <div className="improvements-card">
                    <h3>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è</h3>
                    <ul className="improvements-list">
                      {analysisData.potential_improvements.map((improvement, index) => (
                        <li key={index} className="improvement-item">
                          <Zap size={16} className="improvement-icon" />
                          {improvement}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            ) : (
              <div className="analysis-placeholder">
                <Code size={48} />
                <p>–ù–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑" –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞</p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'search' && (
          <div className="search-container">
            <div className="search-header">
              <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ</h2>
              <input 
                type="text" 
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å..."
                onKeyPress={(e) => e.key === 'Enter' && searchInternet(e.target.value)}
              />
            </div>

            <div className="search-results">
              {searchResults.map((result, index) => (
                <div key={index} className="search-result">
                  <h4 className="result-title">{result.title}</h4>
                  <p className="result-snippet">{result.snippet}</p>
                  {result.url && (
                    <a href={result.url} target="_blank" rel="noopener noreferrer" className="result-url">
                      {result.url}
                    </a>
                  )}
                  <div className="result-time">
                    {new Date(result.timestamp).toLocaleString('ru-RU')}
                  </div>
                </div>
              ))}
              
              {searchResults.length === 0 && (
                <div className="search-placeholder">
                  <Globe size={48} />
                  <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'history' && (
          <div className="history-container">
            <div className="history-header">
              <h2>–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã</h2>
              <button onClick={loadImprovementsHistory} className="refresh-button">
                <History size={20} />
                –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>

            <div className="improvements-history">
              {improvementsHistory.map((improvement, index) => (
                <div key={index} className="history-item">
                  <div className="history-header-item">
                    <div className="history-time">
                      {new Date(improvement.timestamp).toLocaleString('ru-RU')}
                    </div>
                    <div className={`history-status ${improvement.result.success ? 'success' : 'error'}`}>
                      {improvement.result.success ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞'}
                    </div>
                  </div>
                  <div className="history-message">
                    {improvement.result.message}
                  </div>
                  {improvement.result.details && (
                    <div className="history-details">
                      {improvement.result.details.applied && (
                        <div className="applied-improvements">
                          <strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–æ:</strong> {improvement.result.details.applied.join(', ')}
                        </div>
                      )}
                      {improvement.result.details.errors && improvement.result.details.errors.length > 0 && (
                        <div className="improvement-errors">
                          <strong>–û—à–∏–±–∫–∏:</strong> {improvement.result.details.errors.join(', ')}
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
              
              {improvementsHistory.length === 0 && (
                <div className="history-placeholder">
                  <History size={48} />
                  <p>–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞</p>
                </div>
              )}
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default App;