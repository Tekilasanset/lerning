#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import sys
import json
import time
from datetime import datetime
import io

class SelfModifyingAITester:
    def __init__(self, base_url="https://53442b09-298b-49f6-b059-db71e17141a1.preview.emergentagent.com"):
        self.base_url = base_url
        self.tests_run = 0
        self.tests_passed = 0
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'AI-Tester/1.0'
        })

    def log_test(self, name, success, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        self.tests_run += 1
        if success:
            self.tests_passed += 1
            print(f"‚úÖ {name} - –ü–†–û–®–ï–õ")
        else:
            print(f"‚ùå {name} - –ü–†–û–í–ê–õ–ï–ù")
        
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        print()

    def test_api_endpoint(self, name, method, endpoint, expected_status=200, data=None, files=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        url = f"{self.base_url}/api/{endpoint}"
        
        try:
            if method == 'GET':
                response = self.session.get(url, timeout=30)
            elif method == 'POST':
                if files:
                    # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —É–±–∏—Ä–∞–µ–º Content-Type –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    headers = {k: v for k, v in self.session.headers.items() if k != 'Content-Type'}
                    response = requests.post(url, files=files, headers=headers, timeout=30)
                else:
                    response = self.session.post(url, json=data, timeout=30)
            
            success = response.status_code == expected_status
            
            try:
                response_data = response.json()
                details = f"–°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {json.dumps(response_data, ensure_ascii=False)[:200]}..."
            except:
                details = f"–°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text[:200]}..."
            
            self.log_test(name, success, details)
            return success, response_data if success else {}
            
        except Exception as e:
            self.log_test(name, False, f"–û—à–∏–±–∫–∞: {str(e)}")
            return False, {}

    def test_root_endpoint(self):
        """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        return self.test_api_endpoint("–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç", "GET", "")

    def test_chat_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞"""
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
            "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å?"
        ]
        
        success_count = 0
        for i, message in enumerate(test_messages, 1):
            success, response = self.test_api_endpoint(
                f"–ß–∞—Ç - —Å–æ–æ–±—â–µ–Ω–∏–µ {i}",
                "POST", 
                "chat",
                200,
                {"message": message}
            )
            if success:
                success_count += 1
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ['response', 'timestamp', 'improvements', 'knowledge_gained']
                if all(field in response for field in required_fields):
                    print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ: {[f for f in required_fields if f not in response]}")
            
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return success_count == len(test_messages)

    def test_code_analysis(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"""
        success, response = self.test_api_endpoint("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", "GET", "analyze")
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
            expected_fields = ['files_analyzed', 'potential_improvements', 'patterns_found', 'suggestions']
            missing_fields = [field for field in expected_fields if field not in response]
            
            if not missing_fields:
                print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                print(f"   üìä –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {response.get('files_analyzed', 0)}")
                print(f"   üîß –ù–∞–π–¥–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {len(response.get('potential_improvements', []))}")
            else:
                print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        
        return success

    def test_apply_improvements(self):
        """–¢–µ—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π"""
        success, response = self.test_api_endpoint("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π", "POST", "improve")
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if 'success' in response and 'message' in response:
                print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                print(f"   üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {response.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                if 'details' in response:
                    details = response['details']
                    print(f"   üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(details.get('applied', []))}")
                    print(f"   ‚ùå –û—à–∏–±–æ–∫: {len(details.get('errors', []))}")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
        
        return success

    def test_internet_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
        search_queries = [
            "Python –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ 2025",
            "JavaScript —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏",
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        ]
        
        success_count = 0
        for i, query in enumerate(search_queries, 1):
            success, response = self.test_api_endpoint(
                f"–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ - –∑–∞–ø—Ä–æ—Å {i}",
                "POST",
                "search",
                200,
                {"query": query, "max_results": 5}
            )
            
            if success:
                success_count += 1
                results = response.get('results', [])
                count = response.get('count', 0)
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if results and len(results) > 0:
                    first_result = results[0]
                    required_fields = ['title', 'snippet', 'timestamp']
                    if all(field in first_result for field in required_fields):
                        print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            time.sleep(1)
        
        return success_count == len(search_queries)

    def test_file_upload(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_content = """
# –¢–µ—Å—Ç–æ–≤—ã–π Python —Ñ–∞–π–ª
import os
import sys

def test_function():
    print("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
    return True

class TestClass:
    def __init__(self):
        self.value = 42
    
    def get_value(self):
        return self.value

if __name__ == "__main__":
    test_function()
"""
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        test_file = io.BytesIO(test_content.encode('utf-8'))
        test_file.name = 'test_knowledge.py'
        
        files = {'file': ('test_knowledge.py', test_file, 'text/plain')}
        
        success, response = self.test_api_endpoint(
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∑–Ω–∞–Ω–∏–π",
            "POST",
            "upload-knowledge",
            200,
            files=files
        )
        
        if success:
            if 'message' in response and 'knowledge_extracted' in response:
                print(f"   ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                print(f"   üìö –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–Ω–∞–Ω–∏–π: {response.get('knowledge_extracted', 0)}")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
        
        return success

    def test_chat_history(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        success, response = self.test_api_endpoint("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞", "GET", "history")
        
        if success:
            if 'messages' in response:
                messages = response['messages']
                print(f"   üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(messages)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π
                if messages and len(messages) > 0:
                    first_message = messages[0]
                    if 'timestamp' in first_message and 'type' in first_message:
                        print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'messages'")
        
        return success

    def test_improvements_history(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π"""
        success, response = self.test_api_endpoint("–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π", "GET", "improvements-history")
        
        if success:
            if 'improvements' in response:
                improvements = response['improvements']
                print(f"   üìä –ó–∞–ø–∏—Å–µ–π –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö: {len(improvements)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–ª—É—á—à–µ–Ω–∏–π
                if improvements and len(improvements) > 0:
                    first_improvement = improvements[0]
                    if 'timestamp' in first_improvement and 'result' in first_improvement:
                        print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–ª—É—á—à–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–ª—É—á—à–µ–Ω–∏–π")
            else:
                print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'improvements'")
        
        return success

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–æ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–µ–≥–æ—Å—è –ò–ò")
        print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {self.base_url}")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        tests = [
            ("–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç", self.test_root_endpoint),
            ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–∞—Ç–∞", self.test_chat_functionality),
            ("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", self.test_code_analysis),
            ("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π", self.test_apply_improvements),
            ("–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", self.test_internet_search),
            ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", self.test_file_upload),
            ("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞", self.test_chat_history),
            ("–ò—Å—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∏–π", self.test_improvements_history),
        ]
        
        print("üìã –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç—ã API:")
        print()
        
        for test_name, test_func in tests:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é: {test_name}")
            try:
                test_func()
            except Exception as e:
                self.log_test(test_name, False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            print("-" * 40)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.tests_run - self.tests_passed}")
        print(f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.tests_passed / self.tests_run * 100):.1f}%")
        
        if self.tests_passed == self.tests_run:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return 0
        elif self.tests_passed / self.tests_run >= 0.7:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            return 1
        else:
            print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ - –º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
            return 2

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SelfModifyingAITester()
    return tester.run_all_tests()

if __name__ == "__main__":
    sys.exit(main())